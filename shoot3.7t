<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>坦克战游戏</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #000;
            font-family: Arial, sans-serif;
        }
        canvas {
            border: 1px solid #333;
            background-color: #111;
        }
        #gameInfo {
            position: absolute;
            top: 10px;
            left: 10px;
            color: white;
            font-size: 16px;
            background-color: rgba(0,0,0,0.5);
            padding: 5px;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div id="gameInfo">方向键移动，空格射击</div>
    <canvas id="gameCanvas" width="640" height="640"></canvas>

    <script>
        // 游戏常量
        const TILE_SIZE = 32;  // 一个瓦片的大小
        const GRID_WIDTH = 20; // 地图宽度（格子数）
        const GRID_HEIGHT = 20; // 地图高度（格子数）
        const CANVAS_WIDTH = TILE_SIZE * GRID_WIDTH;
        const CANVAS_HEIGHT = TILE_SIZE * GRID_HEIGHT;
        
        // 游戏元素类型
        const EMPTY = 0;
        const BRICK = 1;
        const STEEL = 2;
        const BASE = 3;
        
        // 方向常量
        const UP = 0;
        const RIGHT = 1;
        const DOWN = 2;
        const LEFT = 3;
        
        // 游戏状态
        const GAME_STATE = {
            MENU: 0,
            PLAYING: 1,
            GAME_OVER: 2,
            WIN: 3
        };
        
        // 获取Canvas和上下文
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        
        // 游戏类
        class Game {
            constructor() {
                // 初始化游戏状态和地图
                this.state = GAME_STATE.MENU;
                this.grid = this.createEmptyGrid();
                this.player = null;
                this.base = null;
                this.enemies = [];
                this.bullets = [];
                this.maxEnemies = 10;
                this.enemiesKilled = 0;
                this.totalEnemies = 0;
                
                // 键盘控制
                this.keys = {};
                window.addEventListener('keydown', (e) => {
                    this.keys[e.keyCode] = true;
                    
                    // 防止方向键滚动页面
                    if([32, 37, 38, 39, 40].includes(e.keyCode)) {
                        e.preventDefault();
                    }
                    
                    // 空格键开始游戏或重新开始
                    if(e.keyCode === 32 && this.state !== GAME_STATE.PLAYING) {
                        this.resetGame();
                    }
                });
                
                window.addEventListener('keyup', (e) => {
                    this.keys[e.keyCode] = false;
                });
                
                // 初始化游戏
                this.showMenu();
                
                // 开始游戏循环
                this.lastTime = 0;
                requestAnimationFrame(this.gameLoop.bind(this));
            }
            
            // 创建空地图
            createEmptyGrid() {
                const grid = new Array(GRID_HEIGHT);
                for(let y = 0; y < GRID_HEIGHT; y++) {
                    grid[y] = new Array(GRID_WIDTH).fill(EMPTY);
                }
                return grid;
            }
            
            // 重置游戏
            resetGame() {
                this.grid = this.createEmptyGrid();
                this.player = new Tank(
                    Math.floor(GRID_WIDTH / 2) * TILE_SIZE,
                    (GRID_HEIGHT - 2) * TILE_SIZE,
                    true
                );
                this.base = {
                    x: Math.floor(GRID_WIDTH / 2) * TILE_SIZE,
                    y: (GRID_HEIGHT - 1) * TILE_SIZE
                };
                this.enemies = [];
                this.bullets = [];
                this.enemiesKilled = 0;
                this.totalEnemies = 0;
                this.state = GAME_STATE.PLAYING;
                
                // 创建地图
                this.createMap();
                
                // 创建初始敌人
                this.spawnEnemies(3);
            }
            
            // 创建地图
            createMap() {
                // 放置基地周围的砖墙保护
                const baseX = Math.floor(GRID_WIDTH / 2);
                const baseY = GRID_HEIGHT - 1;
                
                this.grid[baseY][baseX] = BASE;
                
                // 基地保护墙
                this.grid[baseY-1][baseX-1] = BRICK;
                this.grid[baseY-1][baseX] = BRICK;
                this.grid[baseY-1][baseX+1] = BRICK;
                this.grid[baseY][baseX-1] = BRICK;
                this.grid[baseY][baseX+1] = BRICK;
                
                // 随机生成砖墙和钢板
                for(let y = 0; y < GRID_HEIGHT - 2; y++) {
                    for(let x = 0; x < GRID_WIDTH; x++) {
                        // 避开玩家初始位置和上方区域
                        if((y > GRID_HEIGHT - 5 && x >= baseX - 3 && x <= baseX + 3) ||
                           (y < 2 && (x < 3 || x > GRID_WIDTH - 4))) {
                            continue;
                        }
                        
                        const rand = Math.random();
                        if(rand < 0.15) {
                            this.grid[y][x] = BRICK;
                        } else if(rand < 0.2) {
                            this.grid[y][x] = STEEL;
                        }
                    }
                }
                
                // 确保地图连通性
                this.ensureAccessibility();
            }
            
            // 确保地图连通性
            ensureAccessibility() {
                // 确保有通路从顶部到基地
                const baseX = Math.floor(GRID_WIDTH / 2);
                
                // 在顶部创建几个入口
                for(let x = 0; x < GRID_WIDTH; x += 5) {
                    this.grid[0][Math.min(x, GRID_WIDTH-1)] = EMPTY;
                    this.grid[1][Math.min(x, GRID_WIDTH-1)] = EMPTY;
                }
                
                // 创建从顶部到基地的几条路径
                for(let path = 0; path < 3; path++) {
                    let x = Math.floor(Math.random() * GRID_WIDTH);
                    let y = 0;
                    
                    while(y < GRID_HEIGHT - 2) {
                        this.grid[y][x] = EMPTY;
                        
                        // 随机选择下一个方向（倾向于向下移动）
                        const dir = Math.random() < 0.7 ? DOWN : (Math.random() < 0.5 ? LEFT : RIGHT);
                        
                        if(dir === DOWN) {
                            y++;
                        } else if(dir === LEFT && x > 0) {
                            x--;
                        } else if(dir === RIGHT && x < GRID_WIDTH - 1) {
                            x++;
                        } else {
                            y++;
                        }
                    }
                    
                    // 确保路径连接到基地附近
                    if(x < baseX) {
                        for(let i = x; i <= baseX; i++) {
                            this.grid[GRID_HEIGHT-3][i] = EMPTY;
                        }
                    } else {
                        for(let i = baseX; i <= x; i++) {
                            this.grid[GRID_HEIGHT-3][i] = EMPTY;
                        }
                    }
                }
                
                // 确保玩家周围有足够空间
                const playerX = Math.floor(GRID_WIDTH / 2);
                const playerY = GRID_HEIGHT - 2;
                
                this.grid[playerY][playerX] = EMPTY;
                this.grid[playerY][playerX-1] = EMPTY;
                this.grid[playerY][playerX+1] = EMPTY;
                this.grid[playerY-1][playerX] = EMPTY;
            }
            
            // 生成敌人
            spawnEnemies(count) {
                if(this.totalEnemies >= this.maxEnemies) return;
                
                const spawnPoints = [
                    {x: 0, y: 0},
                    {x: Math.floor(GRID_WIDTH / 2) * TILE_SIZE, y: 0},
                    {x: (GRID_WIDTH - 1) * TILE_SIZE, y: 0}
                ];
                
                let spawned = 0;
                for(let i = 0; i < count; i++) {
                    if(this.totalEnemies + spawned >= this.maxEnemies) break;
                    
                    const spawnPoint = spawnPoints[Math.floor(Math.random() * spawnPoints.length)];
                    const enemy = new Tank(spawnPoint.x, spawnPoint.y, false);
                    
                    // 避免敌人重叠
                    let canSpawn = true;
                    for(const existingEnemy of this.enemies) {
                        if(this.checkCollision(enemy, existingEnemy)) {
                            canSpawn = false;
                            break;
                        }
                    }
                    
                    if(canSpawn) {
                        this.enemies.push(enemy);
                        spawned++;
                        this.totalEnemies++;
                    }
                }
            }
            
            // 游戏循环
            gameLoop(timestamp) {
                // 计算时间增量
                const deltaTime = timestamp - this.lastTime;
                this.lastTime = timestamp;
                
                // 清除画布
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                
                if(this.state === GAME_STATE.PLAYING) {
                    this.update(deltaTime / 1000);
                    this.render();
                } else if(this.state === GAME_STATE.MENU) {
                    this.showMenu();
                } else {
                    this.showGameEnd();
                }
                
                requestAnimationFrame(this.gameLoop.bind(this));
            }
            
            // 更新游戏状态
            update(dt) {
                // 更新玩家
                this.updatePlayer(dt);
                
                // 更新敌人
                this.updateEnemies(dt);
                
                // 更新子弹
                this.updateBullets(dt);
                
                // 检查游戏状态
                this.checkGameState();
                
                // 如果敌人数量少于最大值的一半，生成新敌人
                if(this.enemies.length < 5 && this.totalEnemies < this.maxEnemies) {
                    if(Math.random() < 0.02) {
                        this.spawnEnemies(1);
                    }
                }
            }
            
            // 更新玩家
            updatePlayer(dt) {
                if(!this.player) return;
                
                // 保存旧位置用于碰撞检测
                const oldX = this.player.x;
                const oldY = this.player.y;
                
                // 处理移动
                if(this.keys[38]) { // 上
                    this.player.direction = UP;
                    this.player.y -= this.player.speed * dt;
                } else if(this.keys[40]) { // 下
                    this.player.direction = DOWN;
                    this.player.y += this.player.speed * dt;
                } else if(this.keys[37]) { // 左
                    this.player.direction = LEFT;
                    this.player.x -= this.player.speed * dt;
                } else if(this.keys[39]) { // 右
                    this.player.direction = RIGHT;
                    this.player.x += this.player.speed * dt;
                }
                
                // 边界检查
                this.player.x = Math.max(0, Math.min(CANVAS_WIDTH - TILE_SIZE, this.player.x));
                this.player.y = Math.max(0, Math.min(CANVAS_HEIGHT - TILE_SIZE, this.player.y));
                
                // 碰撞检测
                if(this.checkMapCollision(this.player)) {
                    this.player.x = oldX;
                    this.player.y = oldY;
                }
                
                // 射击
                if(this.keys[32] && this.player.canShoot()) { // 空格
                    this.bullets.push(this.player.shoot());
                }
                
                // 更新射击冷却
                this.player.updateShootCooldown(dt);
            }
            
            // 更新敌人
            updateEnemies(dt) {
                for(let i = 0; i < this.enemies.length; i++) {
                    const enemy = this.enemies[i];
                    
                    // 保存旧位置用于碰撞检测
                    const oldX = enemy.x;
                    const oldY = enemy.y;
                    
                    // 更新AI移动
                    enemy.updateAI(dt);
                    
                    // 应用移动
                    switch(enemy.direction) {
                        case UP:
                            enemy.y -= enemy.speed * dt;
                            break;
                        case DOWN:
                            enemy.y += enemy.speed * dt;
                            break;
                        case LEFT:
                            enemy.x -= enemy.speed * dt;
                            break;
                        case RIGHT:
                            enemy.x += enemy.speed * dt;
                            break;
                    }
                    
                    // 边界检查
                    enemy.x = Math.max(0, Math.min(CANVAS_WIDTH - TILE_SIZE, enemy.x));
                    enemy.y = Math.max(0, Math.min(CANVAS_HEIGHT - TILE_SIZE, enemy.y));
                    
                    // 碰撞检测与地图
                    if(this.checkMapCollision(enemy)) {
                        enemy.x = oldX;
                        enemy.y = oldY;
                        enemy.changeDirection();
                    }
                    
                    // 检查与其他坦克的碰撞
                    for(let j = 0; j < this.enemies.length; j++) {
                        if(i !== j && this.checkCollision(enemy, this.enemies[j])) {
                            enemy.x = oldX;
                            enemy.y = oldY;
                            enemy.changeDirection();
                            break;
                        }
                    }
                    
                    // 与玩家的碰撞
                    if(this.player && this.checkCollision(enemy, this.player)) {
                        enemy.x = oldX;
                        enemy.y = oldY;
                        enemy.changeDirection();
                    }
                    
                    // 敌人射击
                    if(enemy.canShoot() && Math.random() < 0.02) {
                        this.bullets.push(enemy.shoot());
                    }
                    
                    // 更新射击冷却
                    enemy.updateShootCooldown(dt);
                }
            }
            
            // 更新子弹
            updateBullets(dt) {
                for(let i = this.bullets.length - 1; i >= 0; i--) {
                    const bullet = this.bullets[i];
                    
                    // 更新子弹位置
                    switch(bullet.direction) {
                        case UP:
                            bullet.y -= bullet.speed * dt;
                            break;
                        case DOWN:
                            bullet.y += bullet.speed * dt;
                            break;
                        case LEFT:
                            bullet.x -= bullet.speed * dt;
                            break;
                        case RIGHT:
                            bullet.x += bullet.speed * dt;
                            break;
                    }
                    
                    // 检查子弹是否超出边界
                    if(bullet.x < 0 || bullet.x > CANVAS_WIDTH || 
                       bullet.y < 0 || bullet.y > CANVAS_HEIGHT) {
                        this.bullets.splice(i, 1);
                        continue;
                    }
                    
                    // 检查子弹与地图碰撞
                    const gridX = Math.floor(bullet.x / TILE_SIZE);
                    const gridY = Math.floor(bullet.y / TILE_SIZE);
                    
                    if(gridX >= 0 && gridX < GRID_WIDTH && gridY >= 0 && gridY < GRID_HEIGHT) {
                        const cell = this.grid[gridY][gridX];
                        
                        if(cell === BRICK) {
                            // 销毁砖墙
                            this.grid[gridY][gridX] = EMPTY;
                            this.bullets.splice(i, 1);
                            continue;
                        } else if(cell === STEEL) {
                            // 钢板反弹子弹
                            this.bullets.splice(i, 1);
                            continue;
                        } else if(cell === BASE) {
                            // 击中基地，游戏结束
                            this.state = GAME_STATE.GAME_OVER;
                            this.bullets.splice(i, 1);
                            continue;
                        }
                    }
                    
                    // 检查子弹与坦克碰撞
                    if(this.player && !bullet.isFromPlayer && this.checkBulletCollision(bullet, this.player)) {
                        // 玩家被击中，游戏结束
                        this.state = GAME_STATE.GAME_OVER;
                        this.bullets.splice(i, 1);
                        continue;
                    }
                    
                    // 检查子弹与敌人碰撞
                    for(let j = this.enemies.length - 1; j >= 0; j--) {
                        if(bullet.isFromPlayer && this.checkBulletCollision(bullet, this.enemies[j])) {
                            // 敌人被击中
                            this.enemies.splice(j, 1);
                            this.bullets.splice(i, 1);
                            this.enemiesKilled++;
                            break;
                        }
                    }
                    
                    // 检查子弹与子弹碰撞
                    for(let j = this.bullets.length - 1; j > i; j--) {
                        if(bullet.isFromPlayer !== this.bullets[j].isFromPlayer &&
                           Math.abs(bullet.x - this.bullets[j].x) < 5 &&
                           Math.abs(bullet.y - this.bullets[j].y) < 5) {
                            // 子弹相撞
                            this.bullets.splice(j, 1);
                            this.bullets.splice(i, 1);
                            break;
                        }
                    }
                }
            }
            
            // 检查游戏状态
            checkGameState() {
                // 检查游戏胜利条件
                if(this.enemiesKilled >= this.maxEnemies && this.enemies.length === 0) {
                    this.state = GAME_STATE.WIN;
                }
            }
            
            // 检查两个物体之间的碰撞
            checkCollision(obj1, obj2) {
                return obj1.x < obj2.x + TILE_SIZE &&
                       obj1.x + TILE_SIZE > obj2.x &&
                       obj1.y < obj2.y + TILE_SIZE &&
                       obj1.y + TILE_SIZE > obj2.y;
            }
            
            // 检查物体与地图的碰撞
            checkMapCollision(obj) {
                // 转换坦克坐标到网格坐标
                const gridX1 = Math.floor(obj.x / TILE_SIZE);
                const gridY1 = Math.floor(obj.y / TILE_SIZE);
                const gridX2 = Math.floor((obj.x + TILE_SIZE - 1) / TILE_SIZE);
                const gridY2 = Math.floor((obj.y + TILE_SIZE - 1) / TILE_SIZE);
                
                // 检查每个角落
                for(let y = gridY1; y <= gridY2; y++) {
                    for(let x = gridX1; x <= gridX2; x++) {
                        if(x >= 0 && x < GRID_WIDTH && y >= 0 && y < GRID_HEIGHT) {
                            if(this.grid[y][x] !== EMPTY) {
                                return true;
                            }
                        }
                    }
                }
                
                return false;
            }
            
            // 检查子弹与物体碰撞
            checkBulletCollision(bullet, obj) {
                return bullet.x >= obj.x && bullet.x <= obj.x + TILE_SIZE &&
                       bullet.y >= obj.y && bullet.y <= obj.y + TILE_SIZE;
            }
            
            // 渲染
            render() {
                // 绘制地图
                this.renderMap();
                
                // 绘制玩家
                if(this.player) {
                    this.player.render(ctx);
                }
                
                // 绘制敌人
                for(const enemy of this.enemies) {
                    enemy.render(ctx);
                }
                
                // 绘制子弹
                for(const bullet of this.bullets) {
                    bullet.render(ctx);
                }
                
                // 绘制UI
                this.renderUI();
            }
            
            // 渲染地图
            renderMap() {
                for(let y = 0; y < GRID_HEIGHT; y++) {
                    for(let x = 0; x < GRID_WIDTH; x++) {
                        const cell = this.grid[y][x];
                        const px = x * TILE_SIZE;
                        const py = y * TILE_SIZE;
                        
                        if(cell === BRICK) {
                            // 砖墙
                            ctx.fillStyle = '#964B00';
                            ctx.fillRect(px, py, TILE_SIZE, TILE_SIZE);
                            
                            // 砖纹
                            ctx.strokeStyle = '#7D3C00';
                            ctx.lineWidth = 2;
                            ctx.strokeRect(px + 2, py + 2, TILE_SIZE/2 - 4, TILE_SIZE/2 - 4);
                            ctx.strokeRect(px + TILE_SIZE/2 + 2, py + 2, TILE_SIZE/2 - 4, TILE_SIZE/2 - 4);
                            ctx.strokeRect(px + 2, py + TILE_SIZE/2 + 2, TILE_SIZE/2 - 4, TILE_SIZE/2 - 4);
                            ctx.strokeRect(px + TILE_SIZE/2 + 2, py + TILE_SIZE/2 + 2, TILE_SIZE/2 - 4, TILE_SIZE/2 - 4);
                        } else if(cell === STEEL) {
                            // 钢板
                            ctx.fillStyle = '#888';
                            ctx.fillRect(px, py, TILE_SIZE, TILE_SIZE);
                            
                            // 钢铁纹理
                            ctx.fillStyle = '#999';
                            ctx.fillRect(px + 4, py + 4, TILE_SIZE - 8, TILE_SIZE - 8);
                            ctx.strokeStyle = '#666';
                            ctx.lineWidth = 1;
                            ctx.strokeRect(px, py, TILE_SIZE, TILE_SIZE);
                        } else if(cell === BASE) {
                            // 基地
                            ctx.fillStyle = '#080';
                            ctx.fillRect(px, py, TILE_SIZE, TILE_SIZE);
                            
                            // 星星标志
                            ctx.fillStyle = '#FF0';
                            ctx.beginPath();
                            const cx = px + TILE_SIZE/2;
                            const cy = py + TILE_SIZE/2;
                            const r = TILE_SIZE * 0.4;
                            
                            for(let i = 0; i < 5; i++) {
                                const angle = Math.PI/2 + i * Math.PI * 2/5;
                                const x1 = cx + Math.cos(angle) * r;
                                const y1 = cy - Math.sin(angle) * r;
                                
                                if(i === 0) ctx.moveTo(x1, y1);
                                else ctx.lineTo(x1, y1);
                                
                                const smallAngle = angle + Math.PI/5;
                                const x2 = cx + Math.cos(smallAngle) * (r/2);
                                const y2 = cy - Math.sin(smallAngle) * (r/2);
                                ctx.lineTo(x2, y2);
                            }
                            
                            ctx.closePath();
                            ctx.fill();
                        }
                    }
                }
            }
            
            // 渲染UI
            renderUI() {
                ctx.fillStyle = 'white';
                ctx.font = '16px Arial';
                ctx.fillText(`敌人: ${this.enemies.length} / ${this.maxEnemies - this.enemiesKilled}`, 10, 25);
                ctx.fillText(`已消灭: ${this.enemiesKilled}`, 10, 50);
            }
            
            // 显示菜单
            showMenu() {
                ctx.fillStyle = 'black';
                ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
                
                ctx.fillStyle = 'white';
                ctx.font = '40px Arial';
                ctx.textAlign = 'center';
                ctx.fillText('坦克战', CANVAS_WIDTH/2, CANVAS_HEIGHT/2 - 40);
                
                ctx.font = '20px Arial';
                ctx.fillText('使用方向键移动，空格键射击', CANVAS_WIDTH/2, CANVAS_HEIGHT/2 + 20);
                ctx.fillText('按空格键开始游戏', CANVAS_WIDTH/2, CANVAS_HEIGHT/2 + 60);
            }
            
            // 显示游戏结束
            showGameEnd() {
                ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
                ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
                
                ctx.fillStyle = 'white';
                ctx.font = '40px Arial';
                ctx.textAlign = 'center';
                
                if(this.state === GAME_STATE.GAME_OVER) {
                    ctx.fillText('游戏结束', CANVAS_WIDTH/2, CANVAS_HEIGHT/2 - 40);
                } else {
                    ctx.fillText('胜利！', CANVAS_WIDTH/2, CANVAS_HEIGHT/2 - 40);
                }
                
                ctx.font = '20px Arial';
                ctx.fillText(`敌人消灭: ${this.enemiesKilled}`, CANVAS_WIDTH/2, CANVAS_HEIGHT/2 + 20);
                ctx.fillText('按空格键重新开始', CANVAS_WIDTH/2, CANVAS_HEIGHT/2 + 60);
            }
        }
        
        // 坦克类
        class Tank {
            constructor(x, y, isPlayer) {
                this.x = x;
                this.y = y;
                this.isPlayer = isPlayer;
                this.direction = isPlayer ? UP : DOWN;
                this.speed = isPlayer ? 150 : 100;
                this.shootCooldown = 0;
                this.shootCooldownMax = isPlayer ? 0.3 : 1;
                this.aiTimer = 0;
                this.aiMoveTime = 0;
            }
            
            // 更新AI行为
            updateAI(dt) {
                if(this.isPlayer) return;
                
                this.aiTimer += dt;
                
                // 每1-3秒更新一次AI决策
                if(this.aiTimer > this.aiMoveTime) {
                    this.aiTimer = 0;
                    this.aiMoveTime = 1 + Math.random() * 2;
                    
                    // 随机选择方向
                    this.direction = Math.floor(Math.random() * 4);
                }
            }
            
            // 改变方向（碰到障碍物时）
            changeDirection() {
                // 简单的AI：随机选择新方向
                if(this.isPlayer) return;
                this.direction = Math.floor(Math.random() * 4);
                this.aiTimer = 0;
            }
            
            // 检查是否可以射击
            canShoot() {
                return this.shootCooldown <= 0;
            }
            
            // 更新射击冷却时间
            updateShootCooldown(dt) {
                if(this.shootCooldown > 0) {
                    this.shootCooldown -= dt;
                }
            }
            
            // 射击
            shoot() {
                this.shootCooldown = this.shootCooldownMax;
                
                let bulletX, bulletY;
                
                // 根据方向计算子弹初始位置
                switch(this.direction) {
                    case UP:
                        bulletX = this.x + TILE_SIZE/2;
                        bulletY = this.y;
                        break;
                    case DOWN:
                        bulletX = this.x + TILE_SIZE/2;
                        bulletY = this.y + TILE_SIZE;
                        break;
                    case LEFT:
                        bulletX = this.x;
                        bulletY = this.y + TILE_SIZE/2;
                        break;
                    case RIGHT:
                        bulletX = this.x + TILE_SIZE;
                        bulletY = this.y + TILE_SIZE/2;
                        break;
                }
                
                return new Bullet(bulletX, bulletY, this.direction, this.isPlayer);
            }
            
            // 渲染坦克
            render(ctx) {
                // 坦克主体
                ctx.fillStyle = this.isPlayer ? '#0A0' : '#A00';
                ctx.fillRect(this.x, this.y, TILE_SIZE, TILE_SIZE);
                
                // 坦克履带
                ctx.fillStyle = '#000';
                ctx.fillRect(this.x, this.y, 5, TILE_SIZE);
                ctx.fillRect(this.x + TILE_SIZE - 5, this.y, 5, TILE_SIZE);
                
                // 坦克炮塔
                ctx.fillStyle = this.isPlayer ? '#090' : '#900';
                ctx.fillRect(this.x + TILE_SIZE/4, this.y + TILE_SIZE/4, TILE_SIZE/2, TILE_SIZE/2);
                
                // 坦克炮管
                ctx.strokeStyle = '#000';
                ctx.lineWidth = 3;
                ctx.beginPath();
                
                const centerX = this.x + TILE_SIZE/2;
                const centerY = this.y + TILE_SIZE/2;
                let endX = centerX, endY = centerY;
                
                switch(this.direction) {
                    case UP:
                        endY = this.y;
                        break;
                    case DOWN:
                        endY = this.y + TILE_SIZE;
                        break;
                    case LEFT:
                        endX = this.x;
                        break;
                    case RIGHT:
                        endX = this.x + TILE_SIZE;
                        break;
                }
                
                ctx.moveTo(centerX, centerY);
                ctx.lineTo(endX, endY);
                ctx.stroke();
            }
        }
        
        // 子弹类
        class Bullet {
            constructor(x, y, direction, isFromPlayer) {
                this.x = x;
                this.y = y;
                this.direction = direction;
                this.isFromPlayer = isFromPlayer;
                this.speed = 300;
            }
            
            // 渲染子弹
            render(ctx) {
                ctx.fillStyle = this.isFromPlayer ? '#0F0' : '#F00';
                ctx.beginPath();
                ctx.arc(this.x, this.y, 3, 0, Math.PI * 2);
                ctx.fill();
            }
        }
        
        // 启动游戏
        window.onload = function() {
            new Game();
        };
    </script>
</body>
</html>